{"remainingRequest":"/Users/sheva/VSCode/vue3_study/node_modules/babel-loader/lib/index.js!/Users/sheva/VSCode/vue3_study/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/sheva/VSCode/vue3_study/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sheva/VSCode/vue3_study/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/sheva/VSCode/vue3_study/src/components/Child.vue?vue&type=template&id=2dcc19c8","dependencies":[{"path":"/Users/sheva/VSCode/vue3_study/src/components/Child.vue","mtime":1613710806679},{"path":"/Users/sheva/VSCode/vue3_study/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sheva/VSCode/vue3_study/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/sheva/VSCode/vue3_study/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/sheva/VSCode/vue3_study/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sheva/VSCode/vue3_study/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB0b0Rpc3BsYXlTdHJpbmcgYXMgX3RvRGlzcGxheVN0cmluZywgY3JlYXRlQ29tbWVudFZOb2RlIGFzIF9jcmVhdGVDb21tZW50Vk5vZGUsIEZyYWdtZW50IGFzIF9GcmFnbWVudCwgb3BlbkJsb2NrIGFzIF9vcGVuQmxvY2ssIGNyZWF0ZUJsb2NrIGFzIF9jcmVhdGVCbG9jayB9IGZyb20gInZ1ZSI7Cgp2YXIgX2hvaXN0ZWRfMSA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVk5vZGUoImgyIiwgbnVsbCwgIkNoaWxk5a2Q57qn57uE5Lu2IiwgLTEKLyogSE9JU1RFRCAqLwopOwoKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX0ZyYWdtZW50LCBudWxsLCBbX2hvaXN0ZWRfMSwgX2NyZWF0ZVZOb2RlKCJoMyIsIG51bGwsICJtc2c6ICIgKyBfdG9EaXNwbGF5U3RyaW5nKF9jdHgubXNnKSwgMQogIC8qIFRFWFQgKi8KICApLCBfY3JlYXRlQ29tbWVudFZOb2RlKCIgPGgzPmNvdW50OiB7e2NvdW50fX08L2gzPiAiKSwgX2NyZWF0ZVZOb2RlKCJidXR0b24iLCB7CiAgICBvbkNsaWNrOiBfY2FjaGVbMV0gfHwgKF9jYWNoZVsxXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIF9jdHguZW1pdFh4eCAmJiBfY3R4LmVtaXRYeHguYXBwbHkoX2N0eCwgYXJndW1lbnRzKTsKICAgIH0pCiAgfSwgIuWIhuWPkeS6i+S7tiIpXSwgNjQKICAvKiBTVEFCTEVfRlJBR01FTlQgKi8KICApOwp9"},{"version":3,"sources":["/Users/sheva/VSCode/vue3_study/src/components/Child.vue"],"names":[],"mappings":";;8BACE,YAAA,CAAkB,IAAlB,EAAkB,IAAlB,EAAI,WAAJ,EAAa,CAAA;AAAA;AAAb,C;;;sDAAA,U,EACA,YAAA,CAAqB,IAArB,EAAqB,IAArB,EAAI,UAAK,gBAAA,CAAE,IAAA,CAAA,GAAF,CAAT,EAAc;AAAA;AAAd,G,EACA,mBAAA,CAAA,6BAAA,C,EACA,YAAA,CAAsC,QAAtC,EAAsC;AAA7B,IAAA,OAAK,EAAA,MAAA,CAAA,CAAA,CAAA,KAAA,MAAA,CAAA,CAAA,CAAA,GAAA;AAAA,aAAE,IAAA,CAAA,OAAA,IAAA,IAAA,CAAA,OAAA,OAAA,IAAA,YAAF;AAAA,KAAA;AAAwB,GAAtC,EAAyB,MAAzB,C","sourcesContent":["<template>\n  <h2>Child子级组件</h2>\n  <h3>msg: {{msg}}</h3>\n  <!-- <h3>count: {{count}}</h3> -->\n  <button @click=\"emitXxx\">分发事件</button>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  name: \"Child\",\n  props: [\"msg\"],\n  // setup 细节问题:\n  // setup 是在beforeCreate生命周期回调之前就执行了，而且就执行了一次\n  // 由此可以推断出： setup在执行的时候，当前的组件还没有创建出来，也就意味着：组件实例对象this根本不能用\n  // this是undefined，说明就不能再通过this再去调用data/computed/methods/props中的相关内容,以及所有compositionApi都不能用\n\n  // setup 中的返回值是一个对象，内部的属性和方法是给html模板使用的\n  // setup 中的对象内部的属性和data函数中的return对象的属性都可以在html模板中使用\n  // setup 中的对象中的属性和data函数中红的对象中的属性可以合并为组件对象的属性\n  // setup 中的对象中的方法和mthods对象中的方法会合并为组件对象的方法\n  // 如果有重名，setup 中的优先 但是尽量不要混用，在setup方法中不能访问data和methods\n  // setup 不能是一个async函数：因为返回值不再是return对象，而是promise，模板看不到return对象中的属性数据\n  // 数据初始化的生命周期回调\n  // beforeCreate() {\n  //   console.log(\"beforeCreate 执行了\");\n  // },\n  // 界面渲染完毕\n  // mounted(){},\n  //setup(props, context) {\n    setup(props, {attrs, slots, emit}){\n    // props参数是一个对象，里面有父级组件向子级组件传递的数据，并且是在子级组件中使用props接收到的所有的属性\n    // console.log(props.msg);\n    // console.log(context.attrs);\n    // console.log(context.emit);\n    // context 参数是一个对象，里面有attrs对象（获取当前组件标签上的属性，但是该属性石在props中没有声明接收的所有属性），emit方法（分发事件），slots对象（插槽）\n    // console.log(context.attrs.msg2);\n    // console.log(\"========\");\n    console.log(\"setup执行了\", this);\n    const showMsg1 = () => {\n      console.log(\"setup中的showMsg1...\");\n    };\n    // 按钮的点击事件的回调函数\n    function emitXxx() {\n      // context.emit('xxx', '+++');\n      emit('xxx', '+++');\n    }\n    return {\n      showMsg1,\n      emitXxx\n      // setup中一般都是返回一个对象，对象中的属性和方法都可以在html模板中直接使用\n    };\n  }\n  // data() {\n  //   return {\n  //     count: 10\n  //   };\n  // },\n  // // 界面渲染后的生命周期的回调\n  // mounted() {\n  //   console.log(this);\n  // },\n  // methods: {\n  //   showMsg2() {\n  //     console.log(\"methods中的showMsg方法\");\n  //   }\n  // }\n});\n</script>\n\n"],"sourceRoot":""}]}